import axios from "axios";
import chatbotMessage from "../models/chatbot_message.js";

const OPENROUTER_API_KEY=process.env.OPENROUTER_API_KEY

// const chatWithGemini = async (message, imageUrl) => {
//     return new Promise(async (resolve, reject) => {
//         try {
//             const prompt = `
//                 B·∫°n l√† m·ªôt tr·ª£ l√Ω y t·∫ø ·∫£o c·ªßa EasyMed. H√£y tr·∫£ l·ªùi c√¢u h·ªèi d·ª±a tr√™n ki·∫øn th·ª©c y khoa ch√≠nh x√°c, d·ªÖ hi·ªÉu.
//                 Kh√¥ng ƒë∆∞a ra ch·∫©n ƒëo√°n m√† ch·ªâ h∆∞·ªõng d·∫´n ng∆∞·ªùi d√πng ƒë·∫øn b√°c sƒ© chuy√™n khoa ph√π h·ª£p.
//                 N·∫øu c√¢u h·ªèi li√™n quan ƒë·∫øn b√°c sƒ©, h√£y l·∫•y d·ªØ li·ªáu t·ª´ danh s√°ch b√°c sƒ© c·ªßa h·ªá th·ªëng.
//                 N·∫øu c√¢u h·ªèi li√™n quan ƒë·∫øn ƒë·∫∑t l·ªãch, h√£y h∆∞·ªõng d·∫´n ng∆∞·ªùi d√πng c√°ch ƒë·∫∑t l·ªãch kh√°m tr√™n EasyMed.

//                 C√¢u h·ªèi: ${message}
//                 Tr·∫£ l·ªùi:
//             `;

//             const messages = [
//                 {
//                     role: "user",
//                     content: [{ type: "text", text: prompt }]
//                 }
//             ];

//             // N·∫øu c√≥ imageUrl, th√™m v√†o content
//             if (imageUrl) {
//                 messages[0].content.push({
//                     type: "image_url",
//                     image_url: { url: imageUrl }
//                 });
//             }

//             const response = await axios.post(
//                 "https://openrouter.ai/api/v1/chat/completions",
//                 { model: "google/gemini-2.0-pro-exp-02-05:free", messages },
//                 {
//                     headers: {
//                         "Authorization": `Bearer ${OPENROUTER_API_KEY}`,
//                         "Content-Type": "application/json"
//                     }
//                 }
//             );

//             resolve({
//                 status: 200,
//                 message: "Chatbot ph·∫£n h·ªìi th√†nh c√¥ng",
//                 data: response.data.choices[0].message.content
//             });
//         } catch (error) {
//             console.error("L·ªói khi g·ªçi API Gemini:", error.response ? error.response.data : error.message);
//             reject(error);
//         }
//     });
// };

const convertMessagesToOpenRouter = (messages) => {
    return messages.map(msg => ({
        role: msg.sender === "user" ? "user" : "assistant",
        content: [{ type: "text", text: msg.text }]
    }));
};

const PROMPT = `
B·∫°n l√† chatbot t∆∞ v·∫•n y t·∫ø c·ªßa h·ªá th·ªëng ƒë·∫∑t l·ªãch kh√°m b·ªánh EasyMed. 
Vai tr√≤ c·ªßa b·∫°n:
- Cung c·∫•p th√¥ng tin v·ªÅ c√°c b·ªánh th∆∞·ªùng g·∫∑p v√† c√°ch ph√≤ng tr√°nh.
- Khuy·∫øn ngh·ªã ng∆∞·ªùi d√πng ƒë·∫øn b·ªánh vi·ªán n·∫øu c√≥ tri·ªáu ch·ª©ng nghi√™m tr·ªçng.
- KH√îNG ch·∫©n ƒëo√°n b·ªánh, k√™ ƒë∆°n thu·ªëc hay thay th·∫ø b√°c sƒ©.
- KH√îNG tr·∫£ l·ªùi c√°c c√¢u h·ªèi ngo√†i lƒ©nh v·ª±c y t·∫ø.

N·∫øu c√¢u h·ªèi li√™n quan ƒë·∫øn b√°c sƒ© ho·∫∑c b·ªánh vi·ªán, h√£y ph·∫£n h·ªìi b·∫±ng:
"B·∫°n c√≥ th·ªÉ xem danh s√°ch b√°c sƒ© v√† b·ªánh vi·ªán tr√™n h·ªá th·ªëng EasyMed." 
(T√¥i s·∫Ω l·∫•y d·ªØ li·ªáu t·ª´ h·ªá th·ªëng v√† cung c·∫•p cho ng∆∞·ªùi d√πng).

N·∫øu c√¢u h·ªèi thu·ªôc lƒ©nh v·ª±c y t·∫ø, h√£y gi·∫£i th√≠ch m·ªôt c√°ch d·ªÖ hi·ªÉu nh∆∞ng KH√îNG ƒë∆∞a ra l·ªùi khuy√™n y t·∫ø ch√≠nh th·ª©c.
`;

const checkHospitalOrDoctorQuery = async (message) => {
    const keywords = ["b√°c sƒ©", "b·ªánh vi·ªán", "kh√°m b·ªánh", "gi·ªù l√†m vi·ªác", "chuy√™n khoa", "ƒë·∫∑t l·ªãch"];
    return keywords.some(keyword => message.toLowerCase().includes(keyword));
};

const getAvailableTimeSlots = (timeTypes, currentNumbers) => {
    const timeSlots = [
        { label: "8:00 - 9:00", value: "T1" },
        { label: "9:00 - 10:00", value: "T2" },
        { label: "10:00 - 11:00", value: "T3" },
        { label: "11:00 - 12:00", value: "T4" },
        { label: "13:00 - 14:00", value: "T5" },
        { label: "14:00 - 15:00", value: "T6" },
        { label: "15:00 - 16:00", value: "T7" },
        { label: "16:00 - 17:00", value: "T8" },
    ];

    return timeTypes
        .map((time, index) => ({
            label: timeSlots.find(slot => slot.value === time)?.label,
            value: time,
            booked: currentNumbers[index],
        }))
        .filter(slot => slot.booked < 3) // Ch·ªâ gi·ªØ l·∫°i khung gi·ªù c√≥ s·ªë l∆∞·ª£t ƒë·∫∑t < 3
        .map(slot => `- ${slot.label}`)
        .join("\n");
};

const userContext = new Map();

const getHospitalOrDoctorInfo = async (userId, message) => {
    if (message.toLowerCase().includes("b√°c sƒ©")) {
        const response = await axios.get("http://localhost:9000/doctor/dropdown");
        const doctors = response.data.data;

        if (doctors.length === 0) return "Kh√¥ng t√¨m th·∫•y th√¥ng tin b√°c sƒ© ph√π h·ª£p.";

        // return doctors.map(doc => 
        //     `*B√°c sƒ© ${doc.doctorId.fullname}*\n- Chuy√™n khoa: ${doc.specialtyId.name}\n- L√†m vi·ªác t·∫°i: ${doc.clinicId.name}\n- Th√¥ng tin b√°c sƒ©: ${doc.description}\n- Gi√° kh√°m: ${doc.price}\n-Trung b√¨nh sao ƒë√°nh gi√°: ${doc.avgRating}\n- L∆∞·ª£t kh√°m: ${doc.bookingCount}\n-L·ªãch kh√°m: Vui l√≤ng ki·ªÉm tra tr√™n h·ªá th·ªëng.`
        // ).join("\n\n");

        let result = doctors.map(doc => {
            userContext.set(userId, { doctorId: doc.doctorId.userId, doctorName: doc.doctorId.fullname });
            return `*B√°c sƒ© ${doc.doctorId.fullname}*\n- Chuy√™n khoa: ${doc.specialtyId.name}\n- L√†m vi·ªác t·∫°i: ${doc.clinicId.name}\n- Th√¥ng tin b√°c sƒ©: ${doc.description}\n- Gi√° kh√°m: ${doc.price}\n-Trung b√¨nh sao ƒë√°nh gi√°: ${doc.avgRating}\n- L∆∞·ª£t kh√°m: ${doc.bookingCount}`
        }).join("\n\n");

        if (message.toLowerCase().includes("ƒë·∫∑t l·ªãch kh√°m") || message.toLowerCase().includes("h·∫πn l·ªãch kh√°m")) {
    
            return `üîπ *H∆∞·ªõng d·∫´n ƒë·∫∑t l·ªãch kh√°m v·ªõi b√°c sƒ© ${userSession.doctorName}:*\n
            *B∆∞·ªõc 1:* Truy c·∫≠p v√†o ƒë∆∞·ªùng d·∫´n: [ƒê·∫∑t l·ªãch kh√°m](http://localhost:5173/bac-si/get?id=${userSession.doctorId})\n
            *B∆∞·ªõc 2:* ·ªû m·ª•c *T∆∞ v·∫•n tr·ª±c ti·∫øp*, ch·ªçn ng√†y v√† khung gi·ªù theo nhu c·∫ßu.\n
            *B∆∞·ªõc 3:* Ch·ªçn *ng∆∞·ªùi s·ª≠ d·ª•ng d·ªãch v·ª•*. N·∫øu ch∆∞a c√≥ h·ªì s∆° b·ªánh nh√¢n, b·∫°n c√≥ th·ªÉ t·∫°o m·ªõi b·∫±ng c√°ch nh·∫•n *Th√™m h·ªì s∆° b·ªánh nh√¢n*.\n
            *B∆∞·ªõc 4:* Nh·∫≠p l√Ω do kh√°m b·ªánh ho·∫∑c m√¥ t·∫£ chi ti·∫øt. B·∫°n c≈©ng c√≥ th·ªÉ g·ª≠i ·∫£nh ho·∫∑c video v·ªÅ t√¨nh tr·∫°ng s·ª©c kh·ªèe t·∫°i m·ª•c *t·ªáp ƒë√≠nh k√®m*.\n
            *B∆∞·ªõc 5:* Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n ph√π h·ª£p.\n
               - N·∫øu ch·ªçn *Thanh to√°n online*, h·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông x√°c nh·∫≠n ƒë·∫∑t l·ªãch sau khi thanh to√°n th√†nh c√¥ng.\n
               - N·∫øu ch·ªçn *Thanh to√°n tr·ª±c ti·∫øp*, b·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c m·ªôt email x√°c nh·∫≠n ƒë·∫∑t l·ªãch. *Vui l√≤ng m·ªü email v√† click v√†o "X√°c nh·∫≠n" ƒë·ªÉ ho√†n th√†nh ƒë·∫∑t kh√°m*.\n
            *B∆∞·ªõc 6:* Ki·ªÉm tra l·∫°i th√¥ng tin v√† x√°c nh·∫≠n ƒë·∫∑t l·ªãch.\n\n
            Sau khi ƒë·∫∑t l·ªãch th√†nh c√¥ng, b·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o x√°c nh·∫≠n.`;
        }
    
        return result;
    }

    if (message.toLowerCase().includes("b·ªánh vi·ªán")) {
        const response = await axios.get("http://localhost:9000/clinic/dropdown");
        const hospitals = response.data.data;

        if (hospitals.length === 0) return "Kh√¥ng t√¨m th·∫•y th√¥ng tin b·ªánh vi·ªán ph√π h·ª£p.";

        return hospitals.map(hosp => 
            `*B·ªánh vi·ªán ${hosp.name}*\n- ƒê·ªãa ch·ªâ: ${hosp.address}\n- Th√¥ng tin b·ªánh vi·ªán: ${hosp.description}\n- Chuy√™n khoa:\n${hosp.specialties.map(spec => `  + ${spec.name}: ${spec.description}`).join("\n")}`
        ).join("\n\n");
    }

    let userSession = userContext.get(userId) || {};

// N·∫øu ng∆∞·ªùi d√πng ƒëang nh·∫≠p ng√†y ƒë·ªÉ xem l·ªãch l√†m vi·ªác
if (userSession.waitingForDate) {
    const today = new Date().toISOString().split("T")[0];
    const requestedDate = message.trim();

    if (requestedDate < today) {
        return "B·∫°n ch·ªâ c√≥ th·ªÉ xem l·ªãch l√†m vi·ªác t·ª´ h√¥m nay tr·ªü ƒëi. Vui l√≤ng nh·∫≠p l·∫°i.";
    }

    try {
        const response = await axios.get(`http://localhost:9000/schedule/${userSession.doctorId}?date=${requestedDate}`);
        console.log("L·ªãch l√†m vi·ªác:", response.data.data);
        const schedule = response.data.data;

        if (!schedule || schedule.length === 0) {
            return `B√°c sƒ© ${userSession.doctorName} kh√¥ng c√≥ l·ªãch l√†m vi·ªác v√†o ng√†y ${requestedDate}.`;
        }

        const availableTimeSlots = getAvailableTimeSlots(schedule[0].timeTypes, schedule[0].currentNumbers);

        if (!availableTimeSlots) {
            return `B√°c sƒ© ${userSession.doctorName} ƒë√£ k√≠n l·ªãch v√†o ng√†y ${requestedDate}.`;
        }

        userContext.set(userId, { ...userSession, waitingForDate: false });

        return `*L·ªãch l√†m vi·ªác c·ªßa b√°c sƒ© ${userSession.doctorName} ng√†y ${requestedDate}:*\n${availableTimeSlots}`;
    } catch (error) {
        console.error("L·ªói khi g·ªçi API l·∫•y l·ªãch kh√°m:", error);
        return "Xin l·ªói, c√≥ l·ªói x·∫£y ra khi l·∫•y l·ªãch l√†m vi·ªác. Vui l√≤ng th·ª≠ l·∫°i.";
    }
}

// Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng y√™u c·∫ßu xem l·ªãch l√†m vi·ªác
if (message.toLowerCase().includes("l·ªãch l√†m vi·ªác")) {
    console.log("Ng∆∞·ªùi d√πng y√™u c·∫ßu xem l·ªãch l√†m vi·ªác c·ªßa b√°c sƒ©");
    if (!userSession.doctorId) {
        return "B·∫°n mu·ªën xem l·ªãch l√†m vi·ªác c·ªßa b√°c sƒ© n√†o? Vui l√≤ng cung c·∫•p t√™n b√°c sƒ© tr∆∞·ªõc.";
    }

    userContext.set(userId, { ...userSession, waitingForDate: true });

    return `B·∫°n mu·ªën xem l·ªãch l√†m vi·ªác c·ªßa b√°c sƒ© ${userSession.doctorName} v√†o ng√†y n√†o? (Ch·ªâ xem ƒë∆∞·ª£c t·ª´ h√¥m nay tr·ªü ƒëi)`;
}
    console.log("Usercontext:", userContext);
    return "Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y th√¥ng tin ph√π h·ª£p.";
};


const chatWithGemini = async (userId, message, imageUrl, sessionId) => {
    try {

        let context = "";
        const isHospitalOrDoctorQuery = await checkHospitalOrDoctorQuery(message);

        if (isHospitalOrDoctorQuery) {
            context = await getHospitalOrDoctorInfo(userId, message);
        }

        console.log("context check:", context);

        const previousMessages = await chatbotMessage.findOne({ userId, sessionId });
        let messages = previousMessages?.messages || [];

        // console.log("previousMessages", previousMessages);
        // console.log("messages tr∆∞·ªõc khi chuy·ªÉn ƒë·ªïi:", messages);

        // Chuy·ªÉn ƒë·ªïi tin nh·∫Øn l·ªãch s·ª≠ sang ƒë·ªãnh d·∫°ng OpenRouter
        const openRouterMessages = convertMessagesToOpenRouter(messages);

        openRouterMessages.unshift({
            role: "system",
            content: [{ type: "text", text: `B·∫°n l√† chatbot t∆∞ v·∫•n y t·∫ø c·ªßa EasyMed. ${PROMPT} \n\nD·ªØ li·ªáu li√™n quan: ${context}` }]
        });

        // Th√™m tin nh·∫Øn m·ªõi c·ªßa ng∆∞·ªùi d√πng
        openRouterMessages.push({
            role: "user",
            content: [{ type: "text", text: message }]
        });

        if (imageUrl) {
            openRouterMessages.push({ type: "image_url", image_url: { url: imageUrl } });
        }

        console.log("messages g·ª≠i ƒë·∫øn OpenRouter:", JSON.stringify(openRouterMessages, null, 2));

        // G·ª≠i tin nh·∫Øn ƒë·∫øn OpenRouter
        const response = await axios.post(
            "https://openrouter.ai/api/v1/chat/completions",
            { model: "google/gemini-2.5-pro-exp-03-25:free", messages: openRouterMessages },
            {
                headers: {
                    Authorization: `Bearer ${OPENROUTER_API_KEY}`,
                    "Content-Type": "application/json"
                }
            }
        );

        console.log("Ph·∫£n h·ªìi t·ª´ OpenRouter:", JSON.stringify(response.data, null, 2));

        // L·∫•y ph·∫£n h·ªìi t·ª´ chatbot
        const reply = response.data.choices[0].message.content || "Kh√¥ng c√≥ ph·∫£n h·ªìi.";

        return { status: 200, message: "Chatbot ph·∫£n h·ªìi th√†nh c√¥ng", data: reply };
    } catch (error) {
        console.error("L·ªói khi g·ªçi API Gemini:", error.response?.data || error.message);
        return { status: 500, message: "L·ªói khi g·ªçi API Gemini", error: error.response?.data || error.message };
    }
};

const saveChatbotMessage = (userId, messages,sessionId)=>{
    return new Promise(async(resolve,reject)=>{
        try{
            const findChatbotMessage = await chatbotMessage.findOne({
                userId: userId,
                sessionId:sessionId
            })

            if(findChatbotMessage){
                // update messages 
                await chatbotMessage.findOneAndUpdate({
                    userId: userId,
                    sessionId:sessionId
                },{
                    messages:messages,
                    createdAt: new Date()
                })
            }else{
                await chatbotMessage.deleteMany({
                    userId,
                    sessionId
                })
    
                await chatbotMessage.create({
                    userId: userId,
                    messages:messages,
                    sessionId:sessionId,
                    createdAt: new Date()
                })
            }

            resolve({
                status:200,
                message:"L∆∞u tin nh·∫Øn th√†nh c√¥ng",
            })
        }catch(e){
            reject(e)
        }
    })
}

const getHistoryChatbotMessage = (userId)=>{
    return new Promise(async(resolve,reject)=>{
        try{
            const messages = await chatbotMessage.find({
                userId
            }).sort({createdAt:-1})
            resolve({
                status:200,
                data:messages
            })
        }catch(e){
            reject(e)
        }
    })
}

const getDetailChatbotMessage = (chatbotMessageId)=>{
    return new Promise(async(resolve,reject)=>{
        try{
            const messages = await chatbotMessage.findOne({
                chatbotMessageId:chatbotMessageId
            })
            resolve({
                status:200,
                data:messages
            })
        }catch(e){
            reject(e)
        }
    })
}

export default {
    chatWithGemini,
    saveChatbotMessage,
    getHistoryChatbotMessage,
    getDetailChatbotMessage
}